<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car Manual Chatbot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        
        body {
            background-color: #f8f9fa;
            color: #333;
        }
        
        .chatbot-container {
            max-width: 800px;
            margin: 40px auto;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            height: 600px;
        }
        
        .chatbot-header {
            background-color: #0066cc;
            color: white;
            padding: 15px 20px;
            display: flex;
            align-items: center;
        }
        
        .chatbot-header h2 {
            margin-left: 10px;
        }
        
        .chatbot-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: white;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            line-height: 1.5;
        }
        
        .user-message {
            background-color: #e6f2ff;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }
        
        .bot-message {
            background-color: #f0f0f0;
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }
        
        .chatbot-input-container {
            display: flex;
            padding: 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #eee;
        }
        
        .chatbot-input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            outline: none;
        }
        
        .chatbot-input:focus {
            border-color: #0066cc;
        }
        
        .chatbot-send-btn {
            background-color: #0066cc;
            color: white;
            border: none;
            padding: 12px 20px;
            margin-left: 10px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
        }
        
        .chatbot-send-btn:hover {
            background-color: #0055aa;
        }
        
        .typing-indicator {
            display: none;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .typing-indicator span {
            height: 8px;
            width: 8px;
            background-color: #b6b6b6;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
            animation: typing 1s infinite;
        }
        
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typing {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-5px); }
            100% { transform: translateY(0px); }
        }

        .source-reference {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="chatbot-container">
        <div class="chatbot-header">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
            </svg>
            <h2>Car Manual Assistant</h2>
        </div>
        <div class="chatbot-messages" id="chatMessages">
            <div class="message bot-message">
                Hello! I'm your car manual assistant. Ask me any questions about your car's features, maintenance, or troubleshooting.
            </div>
            <div class="typing-indicator" id="typingIndicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        <div class="chatbot-input-container">
            <input type="text" class="chatbot-input" id="userInput" placeholder="Type your question here...">
            <button class="chatbot-send-btn" id="sendBtn">Send</button>
        </div>
    </div>

    <script>
        // Configuration - Replace with your actual LlamaCloud details
        const INDEX_NAME = "witty-minnow-2025-04-10";
        const PROJECT_NAME = "Default";
        const ORGANIZATION_ID = "2c1ae4df-4096-433d-90a0-73077c859c7c";
        const API_KEY = "llx-NOPGrChhCD6HpXBJ4cejPD6i0psolIQhMBItb76mYTCPcnkk"; // Replace with your actual API key
        
        // API endpoint
        const API_ENDPOINT = "https://api.llamaindex.ai/api/v1";
        
        const chatMessages = document.getElementById('chatMessages');
        const userInput = document.getElementById('userInput');
        const sendBtn = document.getElementById('sendBtn');
        const typingIndicator = document.getElementById('typingIndicator');
        
        // Function to add a message to the chat
        function addMessage(message, isUser, sourceReferences = []) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
            messageDiv.textContent = message;
            
            // Add source references if available
            if (sourceReferences.length > 0 && !isUser) {
                const sourcesDiv = document.createElement('div');
                sourcesDiv.classList.add('source-reference');
                sourcesDiv.textContent = 'Sources: ' + sourceReferences.join(', ');
                messageDiv.appendChild(sourcesDiv);
            }
            
            // Insert before typing indicator
            chatMessages.insertBefore(messageDiv, typingIndicator);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Function to show typing indicator
        function showTypingIndicator() {
            typingIndicator.style.display = 'flex';
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Function to hide typing indicator
        function hideTypingIndicator() {
            typingIndicator.style.display = 'none';
        }
        
        // Function to query the LlamaCloud index
        async function queryLlamaCloudIndex(query) {
            try {
                showTypingIndicator();
                
                // First, we'll make a simple retrieval call to get the relevant nodes
                const retrievalResponse = await fetchFromLlamaCloud('/retrieve', {
                    index_name: INDEX_NAME,
                    project_name: PROJECT_NAME,
                    organization_id: ORGANIZATION_ID,
                    query: query,
                    similarity_top_k: 3  // Adjust as needed
                });
                
                // Then use the query engine to get a generated response
                const queryResponse = await fetchFromLlamaCloud('/query', {
                    index_name: INDEX_NAME,
                    project_name: PROJECT_NAME,
                    organization_id: ORGANIZATION_ID,
                    query: query
                });
                
                // Extract source information
                const sourceReferences = [];
                if (retrievalResponse && retrievalResponse.nodes) {
                    retrievalResponse.nodes.forEach(node => {
                        if (node.metadata && node.metadata.file_name) {
                            sourceReferences.push(node.metadata.file_name);
                        } else if (node.node_id) {
                            sourceReferences.push(`Node ${node.node_id.substring(0, 8)}...`);
                        }
                    });
                }
                
                // Hide typing indicator and add bot message
                hideTypingIndicator();
                
                // Get the response from the query engine
                let botResponse = "I'm sorry, I couldn't process your question.";
                if (queryResponse && queryResponse.response) {
                    botResponse = queryResponse.response;
                }
                
                addMessage(botResponse, false, sourceReferences);
                
            } catch (error) {
                console.error('Error querying LlamaCloud:', error);
                hideTypingIndicator();
                addMessage("I'm having trouble connecting to my knowledge base. Please try again later.", false);
            }
        }
        
        // Helper function for LlamaCloud API calls
        async function fetchFromLlamaCloud(endpoint, data) {
            const response = await fetch(`${API_ENDPOINT}${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`LlamaCloud API error: ${response.status} - ${errorText}`);
            }
            
            return await response.json();
        }
        
        // Event listener for send button
        sendBtn.addEventListener('click', () => {
            const message = userInput.value.trim();
            if (message) {
                addMessage(message, true);
                userInput.value = '';
                queryLlamaCloudIndex(message);
            }
        });
        
        // Event listener for Enter key
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const message = userInput.value.trim();
                if (message) {
                    addMessage(message, true);
                    userInput.value = '';
                    queryLlamaCloudIndex(message);
                }
            }
        });
    </script>
</body>
</html>
